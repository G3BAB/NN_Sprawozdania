# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IyKSoFbhQ-FC6p6LTXlj8x5JdrCn1bKb
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# ładowanie danych
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/pollution(1).csv')
def consolidate_datetime(df):
    df['datetime'] = pd.to_datetime(df[['year', 'month', 'day', 'hour']])
    return df.drop(columns=['year', 'month', 'day', 'hour'])

le = LabelEncoder()
le.fit(df["cbwd"])
df["cbwd"] = le.transform(df["cbwd"])

# zastępowanie N/A zerami i interpolacja
df_dropna = consolidate_datetime(df.dropna())
df_fillna_zero = consolidate_datetime(df.fillna(0))
df['pm2.5'] = df['pm2.5'].interpolate(method='linear', limit_direction='both')
df_interpolated = consolidate_datetime(df.infer_objects().interpolate())
print(df_interpolated)

# plotting
sns.set(style="darkgrid")
def plot_data(df, title):
    plt.figure(figsize=(15, 20))
    plt.suptitle(title, fontsize=16)
    columns = ['pm2.5', 'DEWP', 'TEMP', 'PRES', 'cbwd', 'Iws', 'Is', 'Ir']
    for i, col in enumerate(columns, 1):
        plt.subplot(8, 1, i)
        plt.plot(df['datetime'], df[col], color=sns.color_palette('coolwarm', 8)[i-1])
        plt.title(col)
        plt.tight_layout(rect=[0, 0, 1, 0.96])
    plt.show()

plot_data(df_dropna, 'Przebieg czasowy parametrów - eliminacja N/A')
plot_data(df_fillna_zero, 'Przebieg czasowy parametrow - zastapienie N/A zerami')
plot_data(df_interpolated, 'Przebieg czasowy parametrow - interpolacja')

def custom_pairplot(df):
    with plt.rc_context({'axes.prop_cycle': plt.cycler(color=['orange'])}):
        g = sns.pairplot(df, diag_kind="hist")
        plt.show()

custom_pairplot(df_dropna)
custom_pairplot(df_fillna_zero)
custom_pairplot(df_interpolated)

# Skalowanie danych
scaler = StandardScaler()
df_encoded = pd.get_dummies(df_interpolated.drop(columns=['datetime']))
df_scaled = pd.DataFrame(scaler.fit_transform(df_encoded), columns=df_encoded.columns, index=df_encoded.index)

X = df_scaled.drop(columns=['pm2.5']).values
y = df_scaled['pm2.5'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)
X_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_test = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))

# Model
model = Sequential([
    LSTM(50, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
history = model.fit(X_train, y_train, epochs=100, batch_size=72, validation_split=0.2, verbose=2, shuffle=False)


y_pred = model.predict(X_test)

plt.figure(figsize=(12, 8))
plt.plot(y_test, label='Actual', color='blue')
plt.plot(y_pred, label='Predicted', color='red')
print(y_pred)
plt.legend()
plt.show()